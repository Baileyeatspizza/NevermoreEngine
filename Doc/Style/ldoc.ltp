# local no_spaces = ldoc.no_spaces
# local use_li = ldoc.use_li
# local display_name = ldoc.display_name
# local iter = ldoc.modules.iter
# local function M(txt,item) return ldoc.markup(txt,item,ldoc.plain) end
# local nowrap = ldoc.wrap and '' or 'nowrap'
# local METHOD_CALL_TABLE = { ['function'] = true; ['method'] = true; ['signal'] = true; }

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>$(ldoc.title)</title>

    <!-- Bootstrap CSS -->
<!--     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
 -->    <link rel="stylesheet" href="$(ldoc.css)" type="text/css" />
#   if ldoc.custom_css then -- add custom CSS file if configured.
    <link rel="stylesheet" href="$(ldoc.custom_css)" type="text/css" />
#   end
  </head>
  <body>
    <div class="ref-container">
      <div class="ref-box">
        <div class="header">
#         if module then
            <h1><span class="api-$(ldoc.module_typename(module):lower())-icon"></span>$(module.name)</h1>
#         else
            <h1><span class="api-hierarchy-icon"></span>$(ldoc.project)</h1>
#         end
          <span class="header-items">
<!--             <span id="search-form"><label>Search: <input id="search-input" type="text" placeholder="Class or Member"></label></span>
 -->            <a id="return-link" href="/api">Back to reference<span class="api-hierarchy-icon"></span></a>
          </span>
        </div>
#       if ldoc.body then -- verbatim HTML as contents; 'non-code' entries
          <div class="box-content">
            $(ldoc.body)
          </div>
#       elseif module then -- module documentation
          <div class="box-content">
            <div id="info">
            <p>
              $(M(module.summary, module))
            </p>
            <p>
              $(M(module.description, module))
            </p>
#           if module.tags.include then
                $(M(ldoc.include_file(module.tags.include)))
#           end

            <!-- Module see -->
#           if module.see then
              <h4>See also</h4>
              <ul>
#               for see in iter(module.see) do
                  <li><a href="$(ldoc.href(see))">$(see.label)</a></li>
#               end
              </ul>
#           end

            <!-- Module usage -->
#           if module.usage then
              <h4>Usage:</h3>
              <ul>
#               for usage in iter(module.usage) do
                  <li><pre class="example">$(ldoc.escape(usage))</pre></li>
#               end
              </ul>
#           end

            <h2>Members</h2>
            <!-- Summary -->
#           if not ldoc.no_summary then
#             for kind, items in module.kinds() do
                <h3>$(kind)</h3>
                <table>
                  <tr>
                    <!-- Function/Methods return types -->
#                   if kind == 'Functions' or kind == 'Methods' then
                      <th>Returns</th>
#                   end
                    <th></th>
                    <th>$(kind)</th>
#                   if kind == 'Properties' or kind =='Fields' then
                      <th>Type</th>
#                   end
                    <th>Description</th>
                  </tr>
#                 for item in items() do
                    <tr>
#                     if kind == 'Functions' or kind == 'Methods' then
                        <td class="col-return-type">
#                         if item.retgroups then
#                           local groups = item.retgroups
#                           for i, group in ldoc.ipairs(groups) do
#                             for r in group:iter() do
#                               local type, ctypes = item:return_type(r)
#                               local returnType = ldoc.typename(type)
#                               if returnType ~= '' then
                                  <span class="api-value-type" href=""><a href="#">$(returnType)</a></span>
#                               end
#                             end
#                           end
#                         end -- end if
                        </td>
#                     end
                      <td class="col-icon"><span class="api-$(kind:lower())-icon"></span></td>
                      <td class="col-name">
#                       local punc = (kind == 'Functions' or kind == 'Methods') and ':' or '%p'
                        <a class="api-member-name" href="#$(item.name)">$(item.name:gsub("^%w+[" .. punc .. "]", ""))</a>
#                       if item.params and METHOD_CALL_TABLE[item.type] then
                          <span class="api-arguments">
                            ( <!--
#                           for parm in iter(item.params) do
                              --><span class="api-argument">
#                               local param, sublist = item:subparam(parm)
#                               if sublist then
                                  <p>TODO: HANDLE SUBLIST</p>
#                               end
#                               for p in iter(param) do
#                                 local name = item:display_name_of(p)
#                                 local paramtype = item:type_of_param(p)
#                                 local tp = ldoc.typename(paramtype)
#                                 local def = item:default_of_param(p)

#                                 if tp ~= '' then
                                    <span class="api-value-type"><a href="">$(tp)</a></span>
#                                 end

                                  <span class="api-argument-name">$(name)</span><!--
#                                 if def and def ~= true then
                                   --> = <span class="api-value">$(def)</span><!--
#                                 end
#                               end
#                               if sublist then
                                  --><p>TODO: HANDLE SUBLIST</p><!--
#                               end
                              --></span><!--
#                           end
                            --> )
                          </span>
#                       end
                      </td>

                      <!-- Properties / Fields type -->
#                     if kind == 'Properties' or kind =='Fields' then
                        <td>
#                         for parm in iter(item.params) do
#                           local param, sublist = item:subparam(parm)
#                           for p in iter(param) do
#                             local paramtype = item:type_of_param(p)
#                             local tp = ldoc.typename(paramtype)
#                             if tp ~= '' then
                                <a class="api-value-type" href="">$(tp)</a>
#                               break
#                             end
#                           end
#                           break
#                         end
                        </td>
#                     end
                      <td class="api-summary">$(M(item.summary,item))</td>
                    </tr>
#                 end
                </table>
#             end
#           end

          <!-- Raw content -->
          <!-- Currently works for both Functions and Tables. The params field either contains
          function parameters or table fields.
          -->
          <div class="member-descriptions">
#           local show_return = not ldoc.no_return_or_parms
#           local show_parms = show_return
#           for kind, items in module.kinds() do
#             local kitem = module.kinds:get_item(kind)
#             local has_description = kitem and ldoc.descript(kitem) ~= ""
#             local is_field = (kind == 'Properties' or kind =='Fields')

              <h2 class="section-header $(has_description and 'has-description')"><a name="$(no_spaces(kind))"></a>$(kind) Descriptions</h2>
              $(M(module.kinds:get_section_description(kind), nil))

              <!-- Document module -->
#             if kitem then
#                 if has_description then
                    <div class="section-description">
                    $(M(ldoc.descript(kitem), kitem))
                    </div>
#                 end
#                 if kitem.usage then
                    <h3>Usage:</h3>
                    <pre class="example">$(ldoc.prettify(kitem.usage[1]))</pre>
#                 end
#             end

              <!-- Document actual items -->
#             for item in items() do
                <div>
                  <!-- Title -->
                  <h3>
                    <!-- Return type -->
#                   if kind == 'Functions' or kind == 'Methods' then
                      <span class="col-return-type">
#                       if item.retgroups then
#                         local groups = item.retgroups
#                         for i, group in ldoc.ipairs(groups) do
#                           for r in group:iter() do
#                             local type, ctypes = item:return_type(r)
#                             local returnType = ldoc.typename(type)
#                             if returnType ~= '' then
                                <span class="api-value-type"><a href="">$(returnType)</a></span>
#                             end
#                           end
#                         end
#                       end -- end if
                      </span>
#                   end

                    <!-- Icon -->
                    <span class="api-$(kind:lower())-icon"></span>

                    <!-- Properties / Fields type -->
#                   if is_field then
                      <td>
#                       for parm in iter(item.params) do
#                         local param, sublist = item:subparam(parm)
#                         for p in iter(param) do
#                           local paramtype = item:type_of_param(p)
#                           local tp = ldoc.typename(paramtype)
#                           if tp ~= '' then
                              <a class="api-value-type" href="">$(tp)</a>
#                             break
#                           end
#                         end
#                         break
#                       end
                      </td>
#                   end

                    $(item.name)

#                   if item.params and METHOD_CALL_TABLE[item.type] then
                      <span class="api-arguments">
                        ( <!--
#                       for parm in iter(item.params) do
                          --><span class="api-argument">
#                           local param, sublist = item:subparam(parm)
#                           if sublist then
                              <p>TODO: HANDLE SUBLIST</p>
#                           end
#                           for p in iter(param) do
#                             local name = item:display_name_of(p)
#                             local paramtype = item:type_of_param(p)
#                             local tp = ldoc.typename(paramtype)
#                             local def = item:default_of_param(p)

#                             if tp ~= '' then
                                <a class="api-value-type" href="">$(tp)</a>
#                             end

                              <span class="api-argument-name">$(name)</span><!--
#                             if def and def ~= true then
                               --> = <span class="api-value">$(def)</span><!--
#                             end
#                           end
#                           if sublist then
                              --><p>TODO: HANDLE SUBLIST</p><!--
#                           end
                          --></span><!--
#                       end
                        --> )
                      </span>
#                   end
                  </h3>
#                 if item.description then
                    <p>$(M(item.summary, item)) $(M(item.description, item))</p>
#                 elseif item.summary then
                    <p>$(M(item.summary, item))</p>
#                 elseif item.description then
                    <p>$(M(item.description, item))</p>
#                 end
#                 if ldoc.custom_tags then
                    <!-- TODO: Insert custom tags here -->
                    <p>Custom tags are not supported</p>
#                 end

                  <!-- Params -->
#                 if show_parms and item.params and #item.params > 0 and not is_field then
#                   local subnames = module.kinds:type_of(item).subnames
#                   if subnames then
                      <h4>$(subnames)</h4>
#                   end
                    <ul class="parameter-list">
#                     for parm in iter(item.params) do
#                       local param, sublist = item:subparam(parm)
#                       if sublist then
                          <li>
                            <span class="parameter">$(sublist)</span>
                            $(M(item.params.map[sublist],item))
                            <ul>
#                       end
#                       for p in iter(param) do
#                         local name = item:display_name_of(p)
#                         local tp = ldoc.typename(item:type_of_param(p))
#                         local def = item:default_of_param(p)
                          <li>
                            <span class="parameter">
#                             if tp ~= '' then
                                <a class="api-value-type" href="#">$(tp)</a>
#                             end
                              <em>$(name)</em><!--
#                             if def == true then
                                --> = nil<!--
#                             elseif def then
                                --> = $(def)<!--
#                             end
#                             if item.params.map[p] ~= '' then
                                -->:$(M(item.params.map[p], item))<!--
#                             end
                            --></span>
#
#                           if item:readonly(p) then
                              <em>readonly</em>
#                           end
                          </li>
#                       end
#                       if sublist then
                            </ul>
                          </li>
#                       end
#                     end
                    </ul>
#                 end

                  <!-- Returns -->
#                 if show_return and item.retgroups then
#                   local groups = item.retgroups
                    <h4>Returns</h4>
                    <ul class="parameter-list">
#                     for i, group in ldoc.ipairs(groups) do
#                       for r in group:iter() do
#                         local type, ctypes = item:return_type(r)
#                         local returnType = ldoc.typename(type)
                          <li>
#                           if returnType ~= '' then
                              <span class="types">
                                <a href="">$(returnType)</a><!--
#                               if r.text ~= '' then
                                  -->:<!--
#                               end
                              --></span>
#                           end
                            $(M(r.text, item))
                          </li>
#                         if ctypes then
#                           for c in ctypes:iter() do
                              <li>
                                <span class="parameter">$(c.name)</span>
                                <span class="types">$(ldoc.typename(c.type))</span>
                                $(M(c.comment,item))
                              </li>
#                           end
#                         end
#                       end
#                       if i < #groups then
                         <h5>Or</h5>
#                       end
#                     end
                    </ul>
#                 end
                  <!-- Raises -->
#                 if show_return and item.raise then
                    <h4>Raises</h4>
                    $(M(item.raise, item))
#                 end

                  <!-- Item usage -->
#                 if item.usage then
                    <h4>Usage</h4>
                    <div>
#                     for usage in iter(item.usage) do
                        <pre class="example">$(ldoc.escape(usage))</pre>
#                     end
                    </div>
#                 end


                </div>
#             end
#           end
            </div>

          </div>
#       else -- Project index, no module!
          <div class="box-content">
#           if ldoc.description then
              <h2>$(M(ldoc.description, nil))</h2>
#           end
#           if ldoc.full_description then
              <p>$(M(ldoc.full_description, nil))</p>
#           end
#           for kind, items in ldoc.kinds() do
              <h2>$(kind)</h2>
#             kind = kind:lower()
              <ul>
#               for item in items() do
                  <li>
                    <span class="api-$(kind:lower())-icon"></span>
                    <a href="$(no_spaces(kind))/$(item.name).html">$(item.name)</a>
#                   if item.summary then
                      <small>&mdash;
                        $(M(ldoc.strip_header(item.summary), item))
                      </small>
#                   end
                  </li>
#               end
              </ul>
#           end
          </div>
#       end
        </div>
      </div>
    </div>

    <footer>
      <div>
        <ul>
          <li><a href="/api">Main</a></li>
          <li><a href="https://github.com/Quenty/NevermoreEngine">Source</a></li>
          <li><a href="https://www.roblox.com/">Roblox</a></li>
        </ul>
      </div>
      <span>Style is totally not a blatant <a href="http://qt-project.org/">Qt Project</a> rip-off and <a href="https://anaminus.github.io/api">Anaminus API</a> ripoff</span>
    </footer>
  </body>
</html>
