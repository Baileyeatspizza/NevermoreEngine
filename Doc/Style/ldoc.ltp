<!-- This file is automatically generated -->
# local function title(depth, text)
#   return ("#"):rep(depth) .. " " .. text
# end
# local function link(text, link)
#   return "[" .. text .."](" .. link .. ")"
# end
# local function list(depth, text)
#   return ("  "):rep(depth - 1) .. "* " .. text
# end
# local function code(text)
#   return "`" .. text .. "`"
# end
# local iter = ldoc.modules.iter

$(title(1, module and module.name or ldoc.project))

# if ldoc.body then
$(ldoc.body)
# elseif module then
$(ldoc.markup(module.summary, module, ldoc.plain))
$(ldoc.markup(module.description, module, ldoc.plain))

# if module.tags.include then
$(ldoc.markup(ldoc.include_file(module.tags.include), ldoc.plain))
# end

# if module.usage then
$(title(2, "Usage"))
# end


# for kind, items in module.kinds() do
$(title(2, kind))

#     for item in items() do
$(title(3, item.name))

<!-- Generate example call -->
#   local example_call = item.name .. "("
#   local count = 0
#   for param in iter(item.params) do
#     example_call = example_call .. param
#     count = count + 1
#     if count ~= #item.params then
#       example_call = example_call .. ", "
#     end
#   end
#   example_call = example_call .. ")"
$("```lua")
$(example_call)
$("```")

<!-- Done generating example -->

#       if item.description then
$(ldoc.markup(item.description, item, ldoc.plain))
#       end
#       if item.summary then
$(ldoc.markup(item.summary, item, ldoc.plain))
#       end
#       if item.params then

#         for param in iter(item.params) do
#           local tp = ldoc.typename(item:type_of_param(p))

$(list(1, code(item:display_name_of(param)))) $(ldoc.markup(item.params.map[param], item, ldoc.plain))
#         end

#       end
#     end

# end


# if module.see then
$(title(2, "See also"))
#   for see in iter(module.see) do
$("* " .. link(ldoc.href(see), see.label))
#   end
# end


#end